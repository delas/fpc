#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module fpc.py
# Autogenerated from fpc.glade
# Generated on Fri Jul 13 19:21:55 2007

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code

import os
import gtk
import kernel
import gobject
import utils

from SimpleGladeApp import SimpleGladeApp
from SimpleGladeApp import bindtextdomain

app_name = "fpc"
app_version = "0.0.1"

glade_dir = "../data"
icon_file = "../data/icon.svg"
locale_dir = ""
menuStatusIcon = gtk.Menu()

bindtextdomain(app_name, locale_dir)


class Fpc(SimpleGladeApp):

	def __init__(self, path="fpc.glade",
				root="fpc",
				domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	#-- Fpc.new {
	def new(self):
		print "A new %s has been created" % self.__class__.__name__

		self.fpc.set_icon_from_file(icon_file)

		# be sure that all projects are finished
		kernel.finishAllProjects()

		# setup projects list
		self.reloadProjectsList()

		# turn off project related button
		self.toolEdit.set_sensitive(False)

		# set status icon
		self.statusIcon = gtk.StatusIcon()
		self.statusIcon.set_from_file(icon_file)
		self.statusIcon.set_tooltip("FastProjectCounter")
		self.statusIcon.connect('activate', self.on_status_icon_left_clicked)
		self.statusIcon.connect('popup-menu', self.on_status_icon_right_clicked)
	#-- Fpc.new }

	#-- Fpc custom methods {


	def on_status_icon_left_clicked(self, data):
		self.fpc.show()


	def on_status_icon_right_clicked(self, widget, button, time):
		menuStatusIcon.show_all()
		menuStatusIcon.popup(None, None, gtk.status_icon_position_menu, button, time, self.statusIcon)

	def activate_project(self, widget, *args):
		kernel.toggleWorkOnProjectID(args[0])


	def insert_row(self, model, parent, firstcolumn, secondcolumn, thirdcolumn, fourthcolumn):
		myiter = model.insert_after(parent, None)
		model.set_value(myiter, 0, firstcolumn)
		model.set_value(myiter, 1, secondcolumn)
		model.set_value(myiter, 2, thirdcolumn)
		model.set_value(myiter, 3, fourthcolumn)
		return myiter


	def reloadProjectsList(self):
		# model and properties
		model = gtk.TreeStore(gobject.TYPE_INT, gobject.TYPE_STRING, gobject.TYPE_INT, gobject.TYPE_INT)
		self.treeProjecsList.set_model(model)
		self.treeProjecsList.set_rules_hint(True)
		self.treeProjecsList.set_headers_visible(True)
		columns = []

		# column setup
		for item in kernel.getHeaderProjectTable():
			columns.append(gtk.TreeViewColumn(item))
		for itemcolumn in columns:
			itemcolumn.set_resizable(True)
			itemcolumn.set_reorderable(True)
			self.treeProjecsList.append_column(itemcolumn)

		# project elements setup
		for project in kernel.getAllProjects():
			self.insert_row(model, None, project[0], project[1], project[2], project[3])

		# statusicon menu
		for project in kernel.getAllProjects():
			menuItem = gtk.CheckMenuItem(project[1])
			menuItem.connect("toggled", self.activate_project, project[0])
			menuStatusIcon.append(menuItem)
		separator = gtk.SeparatorMenuItem()
		menuStatusIcon.append(separator)
		menuItem = gtk.ImageMenuItem(gtk.STOCK_QUIT)
		menuItem.connect("activate", self.on_fpc_destroy)
		menuStatusIcon.append(menuItem)


	#-- Fpc custom methods }

	#-- Fpc.on_fpc_destroy {
	def on_fpc_destroy(self, widget, *args):
		# finish all started projects
		kernel.finishAllProjects()

		self.gtk_main_quit()
	#-- Fpc.on_fpc_destroy }

	#-- Fpc.on_fpc_delete_event {
	def on_fpc_delete_event(self, widget, *args):
		self.fpc.hide()
		return True
	#-- Fpc.on_fpc_delete_event }

	#-- Fpc.on_menuItemInfo_activate {
	def on_menuItemInfo_activate(self, widget, *args):
		Fpcabout()
	#-- Fpc.on_menuItemInfo_activate }

	#-- Fpc.on_toolAdd_clicked {
	def on_toolAdd_clicked(self, widget, *args):
		Fpcaddproject()
		self.reloadProjectsList()
	#-- Fpc.on_toolAdd_clicked }

	#-- Fpc.on_toolEdit_clicked {
	def on_toolEdit_clicked(self, widget, *args):
		print "on_toolEdit_clicked called with self.%s" % widget.get_name()
	#-- Fpc.on_toolEdit_clicked }

	#-- Fpc.on_treeProjecsList_cursor_changed {
	def on_treeProjecsList_cursor_changed(self, widget, *args):
		self.toolEdit.set_sensitive(True)
	#-- Fpc.on_treeProjecsList_cursor_changed }


class Fpcabout(SimpleGladeApp):

	def __init__(self, path="fpc.glade",
				root="fpcAbout",
				domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	#-- Fpcabout.new {
	def new(self):
		print "A new %s has been created" % self.__class__.__name__
	#-- Fpcabout.new }

	#-- Fpcabout custom methods {
	#   Write your own methods here
	#-- Fpcabout custom methods }

	#-- Fpcabout.on_fpcAbout_response {
	def on_fpcAbout_response(self, widget, *args):
		widget.destroy()
	#-- Fpcabout.on_fpcAbout_response }


class Fpcaddproject(SimpleGladeApp):

	def __init__(self, path="fpc.glade",
				root="fpcAddProject",
				domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	#-- Fpcaddproject.new {
	def new(self):
		print "A new %s has been created" % self.__class__.__name__
	#-- Fpcaddproject.new }

	#-- Fpcaddproject custom methods {
	#   Write your own methods here
	#-- Fpcaddproject custom methods }

	#-- Fpcaddproject.on_buttonClose_clicked {
	def on_buttonClose_clicked(self, widget, *args):
		self.fpcAddProject.destroy()
	#-- Fpcaddproject.on_buttonClose_clicked }

	#-- Fpcaddproject.on_buttonApply_clicked {
	def on_buttonApply_clicked(self, widget, *args):
		if (
			(len(self.entryProjectName.get_text()) > 0)
		):
			kernel.addNewProject(
				self.entryProjectName.get_text(),
				self.entryWorkedMins.get_text(),
				self.entryFee.get_text()
				)
			self.fpcAddProject.destroy()
		else:
			dialog  = gtk.MessageDialog(None, gtk.DIALOG_MODAL |
				gtk.DIALOG_DESTROY_WITH_PARENT,gtk.MESSAGE_ERROR, gtk.BUTTONS_OK,
				_("Prego inserire tutti i dati correttamente!"))
			dialog.set_title("FPC - " + _("Errore"))
			dialog.run()
			dialog.destroy()
	#-- Fpcaddproject.on_buttonApply_clicked }


#-- main {

def main():
	fpc = Fpc()
	#fpc_about = Fpcabout()
	#fpc_add_project = Fpcaddproject()

	fpc.run()

if __name__ == "__main__":
	main()

#-- main }
