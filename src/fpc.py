#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module fpc.py
# Autogenerated from fpc.glade
# Generated on Fri Jul 13 14:44:27 2007

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code

import os
import gtk
import kernel
import gobject

from SimpleGladeApp import SimpleGladeApp
from SimpleGladeApp import bindtextdomain

app_name = "fpc"
app_version = "0.0.1"

glade_dir = "../data"
locale_dir = ""

bindtextdomain(app_name, locale_dir)


class Fpc(SimpleGladeApp):

	def __init__(self, path="fpc.glade",
				root="fpc",
				domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	#-- Fpc.new {
	def new(self):
		print "A new %s has been created" % self.__class__.__name__

		# Setup projects list
		self.reloadProjectsList()

		# turn off project related button
		self.toolEdit.set_sensitive(False)
		self.toolWork.set_sensitive(False)
	#-- Fpc.new }

	#-- Fpc custom methods {


	def insert_row(self, model, parent, firstcolumn, secondcolumn, thirdcolumn):
		myiter = model.insert_after(parent, None)
		model.set_value(myiter, 0, firstcolumn)
		model.set_value(myiter, 1, secondcolumn)
		model.set_value(myiter, 1, thirdcolumn)
		return myiter


	def reloadProjectsList(self):
		# model and properties
		model = gtk.TreeStore(gobject.TYPE_INT, gobject.TYPE_STRING, gobject.TYPE_INT)
		self.treeProjecsList.set_model(model)
		self.treeProjecsList.set_rules_hint(True)
		self.treeProjecsList.set_headers_visible(True)
		columns = []
		# column setup
		for item in kernel.getHeaderProjectTable():
			columns.append(gtk.TreeViewColumn(item))
		for itemcolumn in columns:
			itemcolumn.set_resizable(True)
			itemcolumn.set_reorderable(True)
			self.treeProjecsList.append_column(itemcolumn)
		# project elements setup
		iter = None
		for project in kernel.getAllProjects():
			self.insert_row(model, None, project[0], project[1], project[2])
		



	#-- Fpc custom methods }

	#-- Fpc.on_fpc_destroy {
	def on_fpc_destroy(self, widget, *args):
		self.gtk_main_quit()
	#-- Fpc.on_fpc_destroy }

	#-- Fpc.on_menuItemInfo_activate {
	def on_menuItemInfo_activate(self, widget, *args):
		Fpcabout()
	#-- Fpc.on_menuItemInfo_activate }

	#-- Fpc.on_toolAdd_clicked {
	def on_toolAdd_clicked(self, widget, *args):
		print "aaa"
	#-- Fpc.on_toolAdd_clicked }

	#-- Fpc.on_toolEdit_clicked {
	def on_toolEdit_clicked(self, widget, *args):
		print "on_toolEdit_clicked called with self.%s" % widget.get_name()
	#-- Fpc.on_toolEdit_clicked }

	#-- Fpc.on_toolWork_toggled {
	def on_toolWork_toggled(self, widget, *args):
		print "on_toolWork_toggled called with self.%s" % widget.get_name()
	#-- Fpc.on_toolWork_toggled }

	#-- Fpc.on_treeProjecsList_cursor_changed {
	def on_treeProjecsList_cursor_changed(self, widget, *args):
		self.toolEdit.set_sensitive(True)
		self.toolWork.set_sensitive(True)
	#-- Fpc.on_treeProjecsList_cursor_changed }


class Fpcabout(SimpleGladeApp):

	def __init__(self, path="fpc.glade",
				root="fpcAbout",
				domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	#-- Fpcabout.new {
	def new(self):
		print "A new %s has been created" % self.__class__.__name__
	#-- Fpcabout.new }

	#-- Fpcabout custom methods {
	#   Write your own methods here
	#-- Fpcabout custom methods }

	#-- Fpcabout.on_fpcAbout_response {
	def on_fpcAbout_response(self, widget, *args):
		widget.destroy()
	#-- Fpcabout.on_fpcAbout_response }


#-- main {

def main():
	fpc = Fpc()
	#fpc_about = Fpcabout()

	fpc.run()

if __name__ == "__main__":
	main()

#-- main }
