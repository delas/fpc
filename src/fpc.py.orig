#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module fpc.py
# Autogenerated from fpc.glade
# Generated on Sat Jul 14 13:47:50 2007

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code

import os

import gtk

from SimpleGladeApp import SimpleGladeApp
from SimpleGladeApp import bindtextdomain

app_name = "fpc"
app_version = "0.0.1"

glade_dir = ""
locale_dir = ""

bindtextdomain(app_name, locale_dir)


class Fpc(SimpleGladeApp):

    def __init__(self, path="fpc.glade",
                 root="fpc",
                 domain=app_name, **kwargs):
        path = os.path.join(glade_dir, path)
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

    #-- Fpc.new {
    def new(self):
        print "A new %s has been created" % self.__class__.__name__
    #-- Fpc.new }

    #-- Fpc custom methods {
    #   Write your own methods here
    #-- Fpc custom methods }

    #-- Fpc.on_fpc_destroy {
    def on_fpc_destroy(self, widget, *args):
        print "on_fpc_destroy called with self.%s" % widget.get_name()
    #-- Fpc.on_fpc_destroy }

    #-- Fpc.on_fpc_delete_event {
    def on_fpc_delete_event(self, widget, *args):
        print "on_fpc_delete_event called with self.%s" % widget.get_name()
    #-- Fpc.on_fpc_delete_event }

    #-- Fpc.on_menuHide_activate {
    def on_menuHide_activate(self, widget, *args):
        print "on_menuHide_activate called with self.%s" % widget.get_name()
    #-- Fpc.on_menuHide_activate }

    #-- Fpc.on_menuQuit_activate {
    def on_menuQuit_activate(self, widget, *args):
        print "on_menuQuit_activate called with self.%s" % widget.get_name()
    #-- Fpc.on_menuQuit_activate }

    #-- Fpc.on_menuNewProject_activate {
    def on_menuNewProject_activate(self, widget, *args):
        print "on_menuNewProject_activate called with self.%s" % widget.get_name()
    #-- Fpc.on_menuNewProject_activate }

    #-- Fpc.on_menuRemoveProject_activate {
    def on_menuRemoveProject_activate(self, widget, *args):
        print "on_menuRemoveProject_activate called with self.%s" % widget.get_name()
    #-- Fpc.on_menuRemoveProject_activate }

    #-- Fpc.on_menuAbout_activate {
    def on_menuAbout_activate(self, widget, *args):
        print "on_menuAbout_activate called with self.%s" % widget.get_name()
    #-- Fpc.on_menuAbout_activate }

    #-- Fpc.on_toolAdd_clicked {
    def on_toolAdd_clicked(self, widget, *args):
        print "on_toolAdd_clicked called with self.%s" % widget.get_name()
    #-- Fpc.on_toolAdd_clicked }

    #-- Fpc.on_treeProjecsList_cursor_changed {
    def on_treeProjecsList_cursor_changed(self, widget, *args):
        print "on_treeProjecsList_cursor_changed called with self.%s" % widget.get_name()
    #-- Fpc.on_treeProjecsList_cursor_changed }

    #-- Fpc.on_buttonUpdateLog_clicked {
    def on_buttonUpdateLog_clicked(self, widget, *args):
        print "on_buttonUpdateLog_clicked called with self.%s" % widget.get_name()
    #-- Fpc.on_buttonUpdateLog_clicked }


class Fpcabout(SimpleGladeApp):

    def __init__(self, path="fpc.glade",
                 root="fpcAbout",
                 domain=app_name, **kwargs):
        path = os.path.join(glade_dir, path)
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

    #-- Fpcabout.new {
    def new(self):
        print "A new %s has been created" % self.__class__.__name__
    #-- Fpcabout.new }

    #-- Fpcabout custom methods {
    #   Write your own methods here
    #-- Fpcabout custom methods }

    #-- Fpcabout.on_fpcAbout_response {
    def on_fpcAbout_response(self, widget, *args):
        print "on_fpcAbout_response called with self.%s" % widget.get_name()
    #-- Fpcabout.on_fpcAbout_response }


class Fpcaddproject(SimpleGladeApp):

    def __init__(self, path="fpc.glade",
                 root="fpcAddProject",
                 domain=app_name, **kwargs):
        path = os.path.join(glade_dir, path)
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

    #-- Fpcaddproject.new {
    def new(self):
        print "A new %s has been created" % self.__class__.__name__
    #-- Fpcaddproject.new }

    #-- Fpcaddproject custom methods {
    #   Write your own methods here
    #-- Fpcaddproject custom methods }

    #-- Fpcaddproject.on_buttonClose_clicked {
    def on_buttonClose_clicked(self, widget, *args):
        print "on_buttonClose_clicked called with self.%s" % widget.get_name()
    #-- Fpcaddproject.on_buttonClose_clicked }

    #-- Fpcaddproject.on_buttonApply_clicked {
    def on_buttonApply_clicked(self, widget, *args):
        print "on_buttonApply_clicked called with self.%s" % widget.get_name()
    #-- Fpcaddproject.on_buttonApply_clicked }


#-- main {

def main():
    fpc = Fpc()
    fpc_about = Fpcabout()
    fpc_add_project = Fpcaddproject()

    fpc.run()

if __name__ == "__main__":
    main()

#-- main }
